TESTING CARD adventurer
adventurer failed 10000 of 10000 random tests.
Failure messages include: Exactly two cards were not added to the current player's hand. Two treasure cards were not added to the current player's hand. 
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:84.62% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:7.98% of 163
No branches
No calls

Function 'seaHagFunction'
Lines executed:0.00% of 6
No branches
No calls

Function 'embargoFunction'
Lines executed:0.00% of 8
No branches
No calls

Function 'tributeFunction'
Lines executed:0.00% of 34
No branches
No calls

Function 'adventurerFunction'
Lines executed:100.00% of 15
No branches
No calls

Function 'smithyFunction'
Lines executed:100.00% of 5
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:0.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:29.83% of 543
Branches executed:29.38% of 388
Taken at least once:22.94% of 388
Calls executed:15.96% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 874304 returned 100% blocks executed 100%
   874304:    8:int compare(const void* a, const void* b) {
   874304:    8-block  0
   874304:    9:  if (*(int*)a > *(int*)b)
   874304:    9-block  0
branch  0 taken 104292 (fallthrough)
branch  1 taken 770012
   104292:   10:    return 1;
   104292:   10-block  0
unconditional  0 taken 104292
   770012:   11:  if (*(int*)a < *(int*)b)
   770012:   11-block  0
branch  0 taken 260234 (fallthrough)
branch  1 taken 509778
   260234:   12:    return -1;
   260234:   12-block  0
unconditional  0 taken 260234
   509778:   13:  return 0;
   509778:   13-block  0
unconditional  0 taken 509778
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 20000 returned 100% blocks executed 97%
    20000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    20000:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    20000:   44:  SelectStream(1);
    20000:   44-block  0
call    0 returned 20000
    20000:   45:  PutSeed((long)randomSeed);
call    0 returned 20000
        -:   46:  
        -:   47:  //check number of players
    20000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 20000 (fallthrough)
branch  1 taken 0
    20000:   48-block  0
branch  2 taken 4918 (fallthrough)
branch  3 taken 15082
        -:   49:    {
     4918:   50:      return -1;
     4918:   50-block  0
unconditional  0 taken 4918
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    15082:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   165902:   57:  for (i = 0; i < 10; i++)
    15082:   57-block  0
unconditional  0 taken 15082
   150820:   57-block  1
unconditional  1 taken 150820
   165902:   57-block  2
branch  2 taken 150820
branch  3 taken 15082 (fallthrough)
        -:   58:    {
  1659020:   59:      for (j = 0; j < 10; j++)
   150820:   59-block  0
unconditional  0 taken 150820
  1508200:   59-block  1
unconditional  1 taken 1508200
  1659020:   59-block  2
branch  2 taken 1508200
branch  3 taken 150820 (fallthrough)
        -:   60:        {
  1508200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
  1508200:   61-block  0
branch  0 taken 1357380 (fallthrough)
branch  1 taken 150820
  1357380:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1357380
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    15082:   73:  if (numPlayers == 2)
    15082:   73-block  0
branch  0 taken 5072 (fallthrough)
branch  1 taken 10010
        -:   74:    {
     5072:   75:      state->supplyCount[curse] = 10;
     5072:   75-block  0
unconditional  0 taken 5072
        -:   76:    }
    10010:   77:  else if (numPlayers == 3)
    10010:   77-block  0
branch  0 taken 4972 (fallthrough)
branch  1 taken 5038
        -:   78:    {
     4972:   79:      state->supplyCount[curse] = 20;
     4972:   79-block  0
unconditional  0 taken 4972
        -:   80:    }
        -:   81:  else
        -:   82:    {
     5038:   83:      state->supplyCount[curse] = 30;
     5038:   83-block  0
unconditional  0 taken 5038
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    15082:   87:  if (numPlayers == 2)
    15082:   87-block  0
branch  0 taken 5072 (fallthrough)
branch  1 taken 10010
        -:   88:    {
     5072:   89:      state->supplyCount[estate] = 8;
     5072:   90:      state->supplyCount[duchy] = 8;
     5072:   91:      state->supplyCount[province] = 8;
     5072:   91-block  0
unconditional  0 taken 5072
        -:   92:    }
        -:   93:  else
        -:   94:    {
    10010:   95:      state->supplyCount[estate] = 12;
    10010:   96:      state->supplyCount[duchy] = 12;
    10010:   97:      state->supplyCount[province] = 12;
    10010:   97-block  0
unconditional  0 taken 10010
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    15082:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    15082:  102:  state->supplyCount[silver] = 40;
    15082:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   316722:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
    15082:  106-block  0
unconditional  0 taken 15082
   301640:  106-block  1
unconditional  1 taken 301640
   316722:  106-block  2
branch  2 taken 301640
branch  3 taken 15082 (fallthrough)
        -:  107:    {
  2488530:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   301640:  108-block  0
unconditional  0 taken 301640
  2186890:  108-block  1
unconditional  1 taken 2186890
  2488530:  108-block  2
branch  2 taken 2337710
branch  3 taken 150820 (fallthrough)
        -:  109:	{
  2337710:  110:	  if (kingdomCards[j] == i)
  2337710:  110-block  0
branch  0 taken 150820 (fallthrough)
branch  1 taken 2186890
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   150820:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
   150820:  113-block  0
branch  0 taken 135738 (fallthrough)
branch  1 taken 15082
   135738:  113-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 135738
        -:  114:		{
    30164:  115:		  if (numPlayers == 2){ 
    15082:  115-block  0
branch  0 taken 5072 (fallthrough)
branch  1 taken 10010
    15082:  115-block  1
unconditional  2 taken 15082
     5072:  116:		    state->supplyCount[i] = 8; 
     5072:  116-block  0
unconditional  0 taken 5072
        -:  117:		  }
    10010:  118:		  else{ state->supplyCount[i] = 12; }
    10010:  118-block  0
unconditional  0 taken 10010
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   135738:  122:		  state->supplyCount[i] = 10;
   135738:  122-block  0
unconditional  0 taken 135738
        -:  123:		}
   150820:  124:	      break;
   150820:  124-block  0
unconditional  0 taken 150820
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  2186890:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    60294:  138:  for (i = 0; i < numPlayers; i++)
    15082:  138-block  0
unconditional  0 taken 15082
    45212:  138-block  1
unconditional  1 taken 45212
    60294:  138-block  2
branch  2 taken 45212
branch  3 taken 15082 (fallthrough)
        -:  139:    {
    45212:  140:      state->deckCount[i] = 0;
   180848:  141:      for (j = 0; j < 3; j++)
    45212:  141-block  0
unconditional  0 taken 45212
   135636:  141-block  1
unconditional  1 taken 135636
   180848:  141-block  2
branch  2 taken 135636
branch  3 taken 45212 (fallthrough)
        -:  142:	{
   135636:  143:	  state->deck[i][j] = estate;
   135636:  144:	  state->deckCount[i]++;
        -:  145:	}
   361696:  146:      for (j = 3; j < 10; j++)
    45212:  146-block  0
unconditional  0 taken 45212
   316484:  146-block  1
unconditional  1 taken 316484
   361696:  146-block  2
branch  2 taken 316484
branch  3 taken 45212 (fallthrough)
        -:  147:	{
   316484:  148:	  state->deck[i][j] = copper;
   316484:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    60294:  154:  for (i = 0; i < numPlayers; i++)
    15082:  154-block  0
unconditional  0 taken 15082
    45212:  154-block  1
unconditional  1 taken 45212
    60294:  154-block  2
branch  2 taken 45212
branch  3 taken 15082 (fallthrough)
        -:  155:    {
    45212:  156:      if ( shuffle(i, state) < 0 )
    45212:  156-block  0
call    0 returned 45212
branch  1 taken 0 (fallthrough)
branch  2 taken 45212
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    60294:  163:  for (i = 0; i < numPlayers; i++)
    15082:  163-block  0
unconditional  0 taken 15082
    45212:  163-block  1
unconditional  1 taken 45212
    60294:  163-block  2
branch  2 taken 45212
branch  3 taken 15082 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    45212:  166:      state->handCount[i] = 0;
    45212:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   422296:  176:  for (i = 0; i <= treasure_map; i++)
    15082:  176-block  0
unconditional  0 taken 15082
   407214:  176-block  1
unconditional  1 taken 407214
   422296:  176-block  2
branch  2 taken 407214
branch  3 taken 15082 (fallthrough)
        -:  177:    {
   407214:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    15082:  182:  state->outpostPlayed = 0;
    15082:  183:  state->phase = 0;
    15082:  184:  state->numActions = 1;
    15082:  185:  state->numBuys = 1;
    15082:  186:  state->playedCardCount = 0;
    15082:  187:  state->whoseTurn = 0;
    15082:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    90492:  192:  for (it = 0; it < 5; it++){
    15082:  192-block  0
unconditional  0 taken 15082
unconditional  1 taken 75410
    90492:  192-block  1
branch  2 taken 75410
branch  3 taken 15082 (fallthrough)
    75410:  193:    drawCard(state->whoseTurn, state);
    75410:  193-block  0
call    0 returned 75410
        -:  194:  }
        -:  195:
    15082:  196:  updateCoins(state->whoseTurn, state, 0);
    15082:  196-block  0
call    0 returned 15082
        -:  197:
    15082:  198:  return 0;
unconditional  0 taken 15082
        -:  199:}
        -:  200:
function shuffle called 88929 returned 100% blocks executed 100%
    88929:  201:int shuffle(int player, struct gameState *state) {
    88929:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    88929:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    88929:  209:  if (state->deckCount[player] < 1)
    88929:  209-block  0
branch  0 taken 27780 (fallthrough)
branch  1 taken 61149
    27780:  210:    return -1;
    27780:  210-block  0
unconditional  0 taken 27780
    61149:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    61149:  211-block  0
call    0 returned 61149
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   618748:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 61149
   618748:  214-block  0
branch  1 taken 557599
branch  2 taken 61149 (fallthrough)
   557599:  215:    card = floor(Random() * state->deckCount[player]);
   557599:  215-block  0
call    0 returned 557599
   557599:  216:    newDeck[newDeckPos] = state->deck[player][card];
   557599:  217:    newDeckPos++;
  1750257:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 557599
  1192658:  218-block  0
unconditional  1 taken 1192658
  1750257:  218-block  1
branch  2 taken 1192658
branch  3 taken 557599 (fallthrough)
  1192658:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   557599:  221:    state->deckCount[player]--;
   557599:  221-block  0
unconditional  0 taken 557599
        -:  222:  }
   618748:  223:  for (i = 0; i < newDeckPos; i++) {
    61149:  223-block  0
unconditional  0 taken 61149
   557599:  223-block  1
unconditional  1 taken 557599
   618748:  223-block  2
branch  2 taken 557599
branch  3 taken 61149 (fallthrough)
   557599:  224:    state->deck[player][i] = newDeck[i];
   557599:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    88929:  228:  return 0;
    61149:  228-block  0
unconditional  0 taken 61149
    88929:  228-block  1
unconditional  1 taken 88929
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 20000 returned 100% blocks executed 100%
    20000:  346:int whoseTurn(struct gameState *state) {
    20000:  346-block  0
    20000:  347:  return state->whoseTurn;
    20000:  347-block  0
unconditional  0 taken 20000
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 258001 returned 100% blocks executed 100%
   258001:  525:int drawCard(int player, struct gameState *state)
   258001:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   258001:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   258001:  528-block  0
branch  0 taken 37780 (fallthrough)
branch  1 taken 220221
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   143259:  533:    for (i = 0; i < state->discardCount[player];i++){
    37780:  533-block  0
unconditional  0 taken 37780
   105479:  533-block  1
unconditional  1 taken 105479
   143259:  533-block  2
branch  2 taken 105479
branch  3 taken 37780 (fallthrough)
   105479:  534:      state->deck[player][i] = state->discard[player][i];
   105479:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    37780:  538:    state->deckCount[player] = state->discardCount[player];
    37780:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    37780:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    37780:  542-block  0
call    0 returned 37780
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    37780:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    37780:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 37780
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    37780:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    37780:  559:    if (deckCounter == 0)
    37780:  559-block  0
branch  0 taken 21843 (fallthrough)
branch  1 taken 15937
    21843:  560:      return -1;
    21843:  560-block  0
unconditional  0 taken 21843
        -:  561:
    15937:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    15937:  563:    state->deckCount[player]--;
    15937:  564:    state->handCount[player]++;//Increment hand count
    15937:  564-block  0
unconditional  0 taken 15937
        -:  565:  }
        -:  566:
        -:  567:  else{
   220221:  568:    int count = state->handCount[player];//Get current hand count for player
   220221:  568-block  0
unconditional  0 taken 220221
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   220221:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   220221:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   220221:  576:    state->deckCount[player]--;
   220221:  577:    state->handCount[player]++;//Increment hand count
   220221:  577-block  0
unconditional  0 taken 220221
        -:  578:  }
        -:  579:
   236158:  580:  return 0;
   236158:  580-block  0
unconditional  0 taken 236158
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function smithyFunction called 10000 returned 100% blocks executed 100%
    10000:  646:int smithyFunction(struct gameState * state, int currentPlayer, int i, int handPos)
    10000:  646-block  0
        -:  647:{
        -:  648:	//printf("this is the smithy function created for assignment 2\n");
        -:  649:	//+3 Cards originally, +13 cards for ASSIGNMENT 2 bug
        -:  650:	//printf("Player %d handcount: %d\n", currentPlayer, state->handCount[currentPlayer]);
   140000:  651:	for (i = 0; i < 13; i++)
    10000:  651-block  0
unconditional  0 taken 10000
unconditional  1 taken 130000
   140000:  651-block  1
branch  2 taken 130000
branch  3 taken 10000 (fallthrough)
        -:  652:	{
   130000:  653:		drawCard(currentPlayer, state);
   130000:  653-block  0
call    0 returned 130000
        -:  654:		//printf("Player %d handcount: %d\n", currentPlayer, state->handCount[currentPlayer]);
        -:  655:	}
        -:  656:	//discard card from hand
    10000:  657:	discardCard(handPos, currentPlayer, state, 0);
    10000:  657-block  0
call    0 returned 10000
        -:  658:	//printf("Player %d handcount: %d\n", currentPlayer, state->handCount[currentPlayer]);
    10000:  659:	return 0;
unconditional  0 taken 10000
        -:  660:}
        -:  661:
function adventurerFunction called 10000 returned 100% blocks executed 100%
    10000:  662:int adventurerFunction(struct gameState * state, int drawntreasure, int currentPlayer, int temphand[], int cardDrawn, int z)
    10000:  662-block  0
        -:  663:{
        -:  664:	//printf("this is the adventurer function created for assignment 2\n");
    62591:  665:	while(drawntreasure<2){
    10000:  665-block  0
unconditional  0 taken 10000
    62591:  665-block  1
branch  1 taken 52591
branch  2 taken 10000 (fallthrough)
    52591:  666:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    52591:  666-block  0
branch  0 taken 5937 (fallthrough)
branch  1 taken 46654
     5937:  667:          shuffle(currentPlayer, state);
     5937:  667-block  0
call    0 returned 5937
unconditional  1 taken 5937
        -:  668:        }
    52591:  669:        drawCard(currentPlayer, state);
    52591:  669-block  0
call    0 returned 52591
    52591:  670:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    52591:  671:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 49225 (fallthrough)
branch  1 taken 3366
    49225:  671-block  0
branch  2 taken 45920 (fallthrough)
branch  3 taken 3305
    45920:  671-block  1
branch  4 taken 3329 (fallthrough)
branch  5 taken 42591
        -:  672:          //drawntreasure += 0; //ASSIGNMENT 2 Bug:drawntreasure never increments so the while loop will never exit.
    10000:  673:          drawntreasure += 2; //ASSIGNMENT 3: removed infinite loop and put in this bug that increments drawntreasure by 2 instead of 1.
    10000:  673-block  0
unconditional  0 taken 10000
        -:  674:        }
        -:  675:	else{
    42591:  676:          temphand[z]=cardDrawn;
    42591:  677:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    42591:  678:          z++;
    42591:  678-block  0
unconditional  0 taken 42591
        -:  679:        }
        -:  680:      }
    52591:  681:      while(z-1>=0){
    10000:  681-block  0
unconditional  0 taken 10000
    52591:  681-block  1
branch  1 taken 42591
branch  2 taken 10000 (fallthrough)
    42591:  682:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    42591:  683:        z=z-1;
    42591:  683-block  0
unconditional  0 taken 42591
        -:  684:      }
        -:  685:
        -:  686:
    10000:  687:      return 0;
    10000:  687-block  0
unconditional  0 taken 10000
        -:  688:
        -:  689:}
        -:  690:
        -:  691:/*int outpostFunction(struct gameState * state, int currentPlayer, int handPos)
        -:  692:{
        -:  693:      printf("this is the outpost function created for assignment 2\n");
        -:  694:      //set outpost flag	
        -:  695:      state->outpostPlayed++;
        -:  696:
        -:  697:      //discard card
        -:  698:      discardCard(handPos, currentPlayer, state, 0);
        -:  699:      return 0;	
        -:  700:}*/
        -:  701:
function tributeFunction called 0 returned 0% blocks executed 0%
    #####:  702:int tributeFunction(struct gameState * state, int currentPlayer, int nextPlayer, int i, int tributeRevealedCards[])
    $$$$$:  702-block  0
        -:  703:{
    #####:  704:	printf("this is the tribute function created for assignment 2\n");
    $$$$$:  704-block  0
call    0 never executed
    #####:  705:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  706:        if (state->deckCount[nextPlayer] > 0){
    $$$$$:  706-block  0
branch  0 never executed
branch  1 never executed
    #####:  707:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  708:          state->deckCount[nextPlayer]--;
    $$$$$:  708-block  0
unconditional  0 never executed
        -:  709:        }
    #####:  710:        else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  710-block  0
branch  0 never executed
branch  1 never executed
    #####:  711:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  712:          state->discardCount[nextPlayer]--;
    $$$$$:  712-block  0
unconditional  0 never executed
        -:  713:        }
        -:  714:	else{
        -:  715:          //No Card to Reveal
        -:  716:          if (DEBUG){
        -:  717:            printf("No cards to reveal\n");
        -:  718:          }
        -:  719:        }
        -:  720:        }
        -:  721:        else{
    #####:  722:          if (state->deckCount[nextPlayer] == 0){
    $$$$$:  722-block  0
branch  0 never executed
branch  1 never executed
    #####:  723:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  723-block  0
unconditional  0 never executed
    $$$$$:  723-block  1
unconditional  1 never executed
    $$$$$:  723-block  2
branch  2 never executed
branch  3 never executed
    #####:  724:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  725:              state->deckCount[nextPlayer]++;
    #####:  726:              state->discard[nextPlayer][i] = -1;
    #####:  727:              state->discardCount[nextPlayer]--;
        -:  728:            }
    #####:  729:            shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  729-block  0
call    0 never executed
unconditional  1 never executed
        -:  730:          }
    #####:  731:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  732:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  733:	  state->deckCount[nextPlayer]--;
    #####:  734:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  735:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  736:        state->deckCount[nextPlayer]--;
    $$$$$:  736-block  0
unconditional  0 never executed
        -:  737:      }
        -:  738:
    #####:  739:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    $$$$$:  739-block  0
branch  0 never executed
branch  1 never executed
    #####:  740:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  741:        state->playedCardCount++;
    #####:  742:        tributeRevealedCards[1] = -1;
    $$$$$:  742-block  0
unconditional  0 never executed
        -:  743:      }
        -:  744:
    #####:  745:      for (i = 0; i <= 2; i ++){
    $$$$$:  745-block  0
unconditional  0 never executed
    $$$$$:  745-block  1
unconditional  1 never executed
    $$$$$:  745-block  2
branch  2 never executed
branch  3 never executed
    #####:  746:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  746-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  746-block  2
branch  4 never executed
branch  5 never executed
    #####:  747:          state->coins += 2;
    $$$$$:  747-block  0
unconditional  0 never executed
        -:  748:        }
    #####:  749:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  749-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  749-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  749-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  749-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  749-block  4
branch  8 never executed
branch  9 never executed
    #####:  750:          drawCard(currentPlayer, state);
    $$$$$:  750-block  0
call    0 never executed
    #####:  751:          drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  752:        }
        -:  753:        else{//Action Card
    #####:  754:          state->numActions = state->numActions + 2;
    $$$$$:  754-block  0
unconditional  0 never executed
        -:  755:        }
        -:  756:      }
        -:  757:
    #####:  758:      return 0;
    $$$$$:  758-block  0
unconditional  0 never executed
        -:  759:}
        -:  760:
function embargoFunction called 0 returned 0% blocks executed 0%
    #####:  761:int embargoFunction(struct gameState * state, int choice1, int handPos, int currentPlayer)
    $$$$$:  761-block  0
        -:  762:{
    #####:  763:      printf("this is the embargo function created for assignment 2\n");
    $$$$$:  763-block  0
call    0 never executed
    #####:  764:      state->coins = state->coins + 2;
        -:  765:
        -:  766:      //see if selected pile is in play
    #####:  767:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  768:      {
    #####:  769:      	return 0; //ASSIGNMENT 2 bug: should return -1, changed to return 0.
    $$$$$:  769-block  0
unconditional  0 never executed
        -:  770:      }
        -:  771:      //add embargo token to selected supply pile
    #####:  772:      state->embargoTokens[choice1]++;
        -:  773:      //trash card
    #####:  774:      discardCard(handPos, currentPlayer, state, 1);
    $$$$$:  774-block  0
call    0 never executed
    #####:  775:      return 0;
unconditional  0 never executed
        -:  776:}
        -:  777:
function seaHagFunction called 0 returned 0% blocks executed 0%
    #####:  778:int seaHagFunction(struct gameState * state, int currentPlayer, int i)
    $$$$$:  778-block  0
        -:  779:{
        -:  780:      //printf("this is the sea hag function created for assignment 2\n");
    #####:  781:      for (i = 0; i < state->numPlayers; i++){
    $$$$$:  781-block  0
unconditional  0 never executed
    $$$$$:  781-block  1
unconditional  1 never executed
    $$$$$:  781-block  2
branch  2 never executed
branch  3 never executed
        -:  782:        //if (i != currentPlayer){ //ASSIGNMENT 2 bug:forgetting the if statement wil cause the card to affect the player who plays it, when it should only affect all other players except the player who plays it
    #####:  783:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                        state->deckCount[i]--;
    #####:  784:          state->discardCount[i]++;
        -:  785:	  //printf("In sea hag function: deck count is %d before adding curse\n", state->deckCount[i]);
    #####:  786:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  787:	  //printf("In sea hag function: deck count is %d after adding curse\n", state->deckCount[i]);
        -:  788:        //}
        -:  789:          //printf("In sea hag function: deck top card is %d\n", state->deck[i][state->deckCount[i] - 1]);
        -:  790:      }
    #####:  791:      return 0;
    $$$$$:  791-block  0
unconditional  0 never executed
        -:  792:}
        -:  793:
function cardEffect called 20000 returned 100% blocks executed 5%
    20000:  794:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    20000:  794-block  0
        -:  795:{
        -:  796:  int i;
        -:  797:  int j;
        -:  798:  int k;
        -:  799:  int x;
        -:  800:  int index;
    20000:  801:  int currentPlayer = whoseTurn(state);
    20000:  801-block  0
call    0 returned 20000
    20000:  802:  int nextPlayer = currentPlayer + 1;
        -:  803:
    20000:  804:  int tributeRevealedCards[2] = {-1, -1};
        -:  805:  int temphand[MAX_HAND];// moved above the if statement
    20000:  806:  int drawntreasure=0;
        -:  807:  int cardDrawn;
    20000:  808:  int z = 0;// this is the counter for the temp hand
    20000:  809:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5494 (fallthrough)
branch  1 taken 14506
     5494:  810:    nextPlayer = 0;
     5494:  810-block  0
unconditional  0 taken 5494
        -:  811:  }
        -:  812:  int val;
        -:  813:  
        -:  814:	
        -:  815:  //uses switch to select card and perform actions
    20000:  816:  switch( card ) 
    20000:  816-block  0
branch  0 taken 10000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10000
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
        -:  817:    {
        -:  818:    case adventurer:
    10000:  819:      val = adventurerFunction(state, drawntreasure, currentPlayer, temphand, cardDrawn, z);
    10000:  819-block  0
call    0 returned 10000
        -:  820:	
    10000:  821:	return val;
unconditional  0 taken 10000
        -:  822:	/*
        -:  823:  	while(drawntreasure<2){
        -:  824:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  825:	  shuffle(currentPlayer, state);
        -:  826:	}
        -:  827:	drawCard(c3urrentPlayer, state);
        -:  828:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  829:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  830:	  drawntreasure++;
        -:  831:	else{
        -:  832:	  temphand[z]=cardDrawn;
        -:  833:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  834:	  z++;
        -:  835:	}
        -:  836:      }
        -:  837:      while(z-1>=0){
        -:  838:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  839:	z=z-1;
        -:  840:      }
        -:  841:      return 0;
        -:  842:	*/
        -:  843:			
        -:  844:    case council_room:
        -:  845:      //+4 Cards
    #####:  846:      for (i = 0; i < 4; i++)
    $$$$$:  846-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  846-block  1
branch  2 never executed
branch  3 never executed
        -:  847:	{
    #####:  848:	  drawCard(currentPlayer, state);
    $$$$$:  848-block  0
call    0 never executed
        -:  849:	}
        -:  850:			
        -:  851:      //+1 Buy
    #####:  852:      state->numBuys++;
        -:  853:			
        -:  854:      //Each other player draws a card
    #####:  855:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  855-block  0
unconditional  0 never executed
    $$$$$:  855-block  1
unconditional  1 never executed
    $$$$$:  855-block  2
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if ( i != currentPlayer )
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      drawCard(i, state);
    $$$$$:  859-block  0
call    0 never executed
unconditional  1 never executed
        -:  860:	    }
        -:  861:	}
        -:  862:			
        -:  863:      //put played card in played card pile
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  864-block  0
call    0 never executed
        -:  865:			
    #####:  866:      return 0;
unconditional  0 never executed
        -:  867:			
        -:  868:    case feast:
        -:  869:      //gain card with cost up to 5
        -:  870:      //Backup hand
    #####:  871:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  871-block  0
unconditional  0 never executed
    $$$$$:  871-block  1
unconditional  1 never executed
    $$$$$:  871-block  2
branch  2 never executed
branch  3 never executed
    #####:  872:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  873:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  874:      }
        -:  875:      //Backup hand
        -:  876:
        -:  877:      //Update Coins for Buy
    #####:  878:      updateCoins(currentPlayer, state, 5);
    $$$$$:  878-block  0
call    0 never executed
    #####:  879:      x = 1;//Condition to loop on
    #####:  880:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  880-block  0
branch  1 never executed
branch  2 never executed
    #####:  881:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  882:	  if (DEBUG)
        -:  883:	    printf("None of that card left, sorry!\n");
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  887:	  }
        -:  888:	}
    #####:  889:	else if (state->coins < getCost(choice1)){
    $$$$$:  889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  890:	  printf("That card is too expensive!\n");
    $$$$$:  890-block  0
call    0 never executed
unconditional  1 never executed
        -:  891:
        -:  892:	  if (DEBUG){
        -:  893:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  894:	  }
        -:  895:	}
        -:  896:	else{
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  900:	  }
        -:  901:
    #####:  902:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  902-block  0
call    0 never executed
    #####:  903:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  907:	  }
        -:  908:
        -:  909:	}
        -:  910:      }     
        -:  911:
        -:  912:      //Reset Hand
    #####:  913:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  913-block  0
unconditional  0 never executed
    $$$$$:  913-block  1
unconditional  1 never executed
    $$$$$:  913-block  2
branch  2 never executed
branch  3 never executed
    #####:  914:	state->hand[currentPlayer][i] = temphand[i];
    #####:  915:	temphand[i] = -1;
        -:  916:      }
        -:  917:      //Reset Hand
        -:  918:      			
    #####:  919:      return 0;
    $$$$$:  919-block  0
unconditional  0 never executed
        -:  920:			
        -:  921:    case gardens:
    #####:  922:      return -1;
    $$$$$:  922-block  0
unconditional  0 never executed
        -:  923:			
        -:  924:    case mine:
    #####:  925:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  926:
    #####:  927:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  927-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  927-block  1
branch  2 never executed
branch  3 never executed
        -:  928:	{
    #####:  929:	  return -1;
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	}
        -:  931:		
    #####:  932:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  932-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  932-block  1
branch  2 never executed
branch  3 never executed
        -:  933:	{
    #####:  934:	  return -1;
    $$$$$:  934-block  0
unconditional  0 never executed
        -:  935:	}
        -:  936:
    #####:  937:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  937-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  938:	{
    #####:  939:	  return -1;
    $$$$$:  939-block  0
unconditional  0 never executed
        -:  940:	}
        -:  941:
    #####:  942:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  942-block  0
call    0 never executed
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  946:
        -:  947:      //discard trashed card
    #####:  948:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  948-block  0
unconditional  1 never executed
    $$$$$:  948-block  1
branch  2 never executed
branch  3 never executed
        -:  949:	{
    #####:  950:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  950-block  0
branch  0 never executed
branch  1 never executed
        -:  951:	    {
    #####:  952:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  952-block  0
call    0 never executed
    #####:  953:	      break;
unconditional  0 never executed
        -:  954:	    }
        -:  955:	}
        -:  956:			
    #####:  957:      return 0;
    $$$$$:  957-block  0
unconditional  0 never executed
        -:  958:			
        -:  959:    case remodel:
    #####:  960:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  961:
    #####:  962:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  962-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  963:	{
    #####:  964:	  return -1;
    $$$$$:  964-block  0
unconditional  0 never executed
        -:  965:	}
        -:  966:
    #####:  967:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  967-block  0
call    0 never executed
        -:  968:
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  971:
        -:  972:      //discard trashed card
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  973-block  0
unconditional  1 never executed
    $$$$$:  973-block  1
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  975-block  0
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  977-block  0
call    0 never executed
    #####:  978:	      break;
unconditional  0 never executed
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:
    #####:  983:      return 0;
    $$$$$:  983-block  0
unconditional  0 never executed
        -:  984:		
        -:  985:    case smithy:
        -:  986:      
    10000:  987:	val = smithyFunction(state, currentPlayer, i, handPos);
    10000:  987-block  0
call    0 returned 10000
    10000:  988:	return val;
unconditional  0 taken 10000
        -:  989:	/*
        -:  990:      //+3 Cards
        -:  991:      for (i = 0; i < 3; i++)
        -:  992:	{
        -:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        -:  995:			
        -:  996:      //discard card from hand
        -:  997:      discardCard(handPos, currentPlayer, state, 0);
        -:  998:      return 0; */
        -:  999:		
        -: 1000:    case village:
        -: 1001:      //+1 Card
    #####: 1002:      drawCard(currentPlayer, state);
    $$$$$: 1002-block  0
call    0 never executed
        -: 1003:			
        -: 1004:      //+2 Actions
    #####: 1005:      state->numActions = state->numActions + 2;
        -: 1006:			
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1009:      return 0;
unconditional  0 never executed
        -: 1010:		
        -: 1011:    case baron:
    #####: 1012:      state->numBuys++;//Increase buys by 1!
    #####: 1013:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$: 1013-block  0
branch  0 never executed
branch  1 never executed
    #####: 1014:	int p = 0;//Iterator for hand!
    #####: 1015:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1016:	while(card_not_discarded){
    $$$$$: 1016-block  0
unconditional  0 never executed
    $$$$$: 1016-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1016-block  2
unconditional  3 never executed
    #####: 1017:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$: 1017-block  0
branch  0 never executed
branch  1 never executed
    #####: 1018:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1019:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1020:	    state->discardCount[currentPlayer]++;
    #####: 1021:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$: 1021-block  0
unconditional  0 never executed
    $$$$$: 1021-block  1
unconditional  1 never executed
    $$$$$: 1021-block  2
branch  2 never executed
branch  3 never executed
    #####: 1022:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1023:	    }
    #####: 1024:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1025:	    state->handCount[currentPlayer]--;
    #####: 1026:	    card_not_discarded = 0;//Exit the loop
    $$$$$: 1026-block  0
unconditional  0 never executed
        -: 1027:	  }
    #####: 1028:	  else if (p > state->handCount[currentPlayer]){
    $$$$$: 1028-block  0
branch  0 never executed
branch  1 never executed
        -: 1029:	    if(DEBUG) {
        -: 1030:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1031:	      printf("Must gain an estate if there are any\n");
        -: 1032:	    }
    #####: 1033:	    if (supplyCount(estate, state) > 0){
    $$$$$: 1033-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1034:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$: 1034-block  0
call    0 never executed
    #####: 1035:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1036:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1037:		isGameOver(state);
    $$$$$: 1037-block  0
call    0 never executed
unconditional  1 never executed
        -: 1038:	      }
        -: 1039:	    }
    #####: 1040:	    card_not_discarded = 0;//Exit the loop
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	  }
        -: 1042:			    
        -: 1043:	  else{
    #####: 1044:	    p++;//Next card
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:			    
        -: 1049:      else{
    #####: 1050:	if (supplyCount(estate, state) > 0){
    $$$$$: 1050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$: 1051-block  0
call    0 never executed
    #####: 1052:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1053:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:	    isGameOver(state);
    $$$$$: 1054-block  0
call    0 never executed
unconditional  1 never executed
        -: 1055:	  }
        -: 1056:	}
        -: 1057:      }
        -: 1058:	    
        -: 1059:      
    #####: 1060:      return 0;
    $$$$$: 1060-block  0
unconditional  0 never executed
        -: 1061:		
        -: 1062:    case great_hall:
        -: 1063:      //+1 Card
    #####: 1064:      drawCard(currentPlayer, state);
    $$$$$: 1064-block  0
call    0 never executed
        -: 1065:			
        -: 1066:      //+1 Actions
    #####: 1067:      state->numActions++;
        -: 1068:			
        -: 1069:      //discard card from hand
    #####: 1070:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1071:      return 0;
unconditional  0 never executed
        -: 1072:		
        -: 1073:    case minion:
        -: 1074:      //+1 action
    #####: 1075:      state->numActions++;
        -: 1076:			
        -: 1077:      //discard card from hand
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1078-block  0
call    0 never executed
        -: 1079:			
    #####: 1080:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  state->coins = state->coins + 2;
    $$$$$: 1082-block  0
unconditional  0 never executed
        -: 1083:	}
        -: 1084:			
    #####: 1085:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$: 1085-block  0
branch  0 never executed
branch  1 never executed
        -: 1086:	{
        -: 1087:	  //discard hand
    #####: 1088:	  while(numHandCards(state) > 0)
    $$$$$: 1088-block  0
unconditional  0 never executed
    $$$$$: 1088-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1089:	    {
    #####: 1090:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1090-block  0
call    0 never executed
unconditional  1 never executed
        -: 1091:	    }
        -: 1092:				
        -: 1093:	  //draw 4
    #####: 1094:	  for (i = 0; i < 4; i++)
    $$$$$: 1094-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1094-block  1
branch  2 never executed
branch  3 never executed
        -: 1095:	    {
    #####: 1096:	      drawCard(currentPlayer, state);
    $$$$$: 1096-block  0
call    0 never executed
        -: 1097:	    }
        -: 1098:				
        -: 1099:	  //other players discard hand and redraw if hand size > 4
    #####: 1100:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1100-block  0
unconditional  0 never executed
    $$$$$: 1100-block  1
unconditional  1 never executed
    $$$$$: 1100-block  2
branch  2 never executed
branch  3 never executed
        -: 1101:	    {
    #####: 1102:	      if (i != currentPlayer)
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
        -: 1103:		{
    #####: 1104:		  if ( state->handCount[i] > 4 )
    $$$$$: 1104-block  0
branch  0 never executed
branch  1 never executed
        -: 1105:		    {
        -: 1106:		      //discard hand
    #####: 1107:		      while( state->handCount[i] > 0 )
    $$$$$: 1107-block  0
unconditional  0 never executed
    $$$$$: 1107-block  1
branch  1 never executed
branch  2 never executed
        -: 1108:			{
    #####: 1109:			  discardCard(handPos, i, state, 0);
    $$$$$: 1109-block  0
call    0 never executed
unconditional  1 never executed
        -: 1110:			}
        -: 1111:							
        -: 1112:		      //draw 4
    #####: 1113:		      for (j = 0; j < 4; j++)
    $$$$$: 1113-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1113-block  1
branch  2 never executed
branch  3 never executed
        -: 1114:			{
    #####: 1115:			  drawCard(i, state);
    $$$$$: 1115-block  0
call    0 never executed
        -: 1116:			}
        -: 1117:		    }
        -: 1118:		}
        -: 1119:	    }
        -: 1120:				
        -: 1121:	}
    #####: 1122:      return 0;
    $$$$$: 1122-block  0
unconditional  0 never executed
        -: 1123:		
        -: 1124:    case steward:
    #####: 1125:      if (choice1 == 1)
    $$$$$: 1125-block  0
branch  0 never executed
branch  1 never executed
        -: 1126:	{
        -: 1127:	  //+2 cards
    #####: 1128:	  drawCard(currentPlayer, state);
    $$$$$: 1128-block  0
call    0 never executed
    #####: 1129:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1130:	}
    #####: 1131:      else if (choice1 == 2)
    $$$$$: 1131-block  0
branch  0 never executed
branch  1 never executed
        -: 1132:	{
        -: 1133:	  //+2 coins
    #####: 1134:	  state->coins = state->coins + 2;
    $$$$$: 1134-block  0
unconditional  0 never executed
        -: 1135:	}
        -: 1136:      else
        -: 1137:	{
        -: 1138:	  //trash 2 cards in hand
    #####: 1139:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1139-block  0
call    0 never executed
    #####: 1140:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1141:	}
        -: 1142:			
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1144-block  0
call    0 never executed
    #####: 1145:      return 0;
unconditional  0 never executed
        -: 1146:		
        -: 1147:    case tribute:
        -: 1148:
    #####: 1149:	val = tributeFunction(state, currentPlayer, nextPlayer, i, tributeRevealedCards);
    $$$$$: 1149-block  0
call    0 never executed
    #####: 1150:	return val;
unconditional  0 never executed
        -: 1151:	/*
        -: 1152:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1153:	if (state->deckCount[nextPlayer] > 0){
        -: 1154:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1155:	  state->deckCount[nextPlayer]--;
        -: 1156:	}
        -: 1157:	else if (state->discardCount[nextPlayer] > 0){
        -: 1158:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1159:	  state->discardCount[nextPlayer]--;
        -: 1160:	}
        -: 1161:	else{
        -: 1162:	  //No Card to Reveal
        -: 1163:	  if (DEBUG){
        -: 1164:	    printf("No cards to reveal\n");
        -: 1165:	  }
        -: 1166:	}
        -: 1167:      }
        -: 1168:	    
        -: 1169:      else{
        -: 1170:	if (state->deckCount[nextPlayer] == 0){
        -: 1171:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1172:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1173:	    state->deckCount[nextPlayer]++;
        -: 1174:	    state->discard[nextPlayer][i] = -1;
        -: 1175:	    state->discardCount[nextPlayer]--;
        -: 1176:	  }
        -: 1177:			    
        -: 1178:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1179:	} 
        -: 1180:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1181:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1182:	state->deckCount[nextPlayer]--;
        -: 1183:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1184:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1185:	state->deckCount[nextPlayer]--;
        -: 1186:      }    
        -: 1187:		       
        -: 1188:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1189:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1190:	state->playedCardCount++;
        -: 1191:	tributeRevealedCards[1] = -1;
        -: 1192:      }
        -: 1193:
        -: 1194:      for (i = 0; i <= 2; i ++){
        -: 1195:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1196:	  state->coins += 2;
        -: 1197:	}
        -: 1198:		    
        -: 1199:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1200:	  drawCard(currentPlayer, state);
        -: 1201:	  drawCard(currentPlayer, state);
        -: 1202:	}
        -: 1203:	else{//Action Card
        -: 1204:	  state->numActions = state->numActions + 2;
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      return 0; 
        -: 1209:		
        -: 1210:    case ambassador:
        -: 1211:      j = 0;		//used to check if player has enough cards to discard
        -: 1212:
        -: 1213:      if (choice2 > 2 || choice2 < 0)
        -: 1214:	{
        -: 1215:	  return -1;				
        -: 1216:	}
        -: 1217:
        -: 1218:      if (choice1 == handPos)
        -: 1219:	{
        -: 1220:	  return -1;
        -: 1221:	}
        -: 1222:
        -: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
        -: 1225:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1226:	    {
        -: 1227:	      j++;
        -: 1228:	    }
        -: 1229:	}
        -: 1230:      if (j < choice2)
        -: 1231:	{
        -: 1232:	  return -1;				
        -: 1233:	}
        -: 1234:
        -: 1235:      if (DEBUG) 
        -: 1236:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1237:
        -: 1238:      //increase supply count for choosen card by amount being discarded
        -: 1239:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1240:			
        -: 1241:      //each other player gains a copy of revealed card
        -: 1242:      for (i = 0; i < state->numPlayers; i++)
        -: 1243:	{
        -: 1244:	  if (i != currentPlayer)
        -: 1245:	    {
        -: 1246:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1247:	    }
        -: 1248:	}
        -: 1249:
        -: 1250:      //discard played card from hand
        -: 1251:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1252:
        -: 1253:      //trash copies of cards returned to supply
        -: 1254:      for (j = 0; j < choice2; j++)
        -: 1255:	{
        -: 1256:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1257:	    {
        -: 1258:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1259:		{
        -: 1260:		  discardCard(i, currentPlayer, state, 1);
        -: 1261:		  break;
        -: 1262:		}
        -: 1263:	    }
        -: 1264:	}			
        -: 1265:
        -: 1266:      return 0; */
        -: 1267:		
        -: 1268:    case cutpurse:
        -: 1269:
    #####: 1270:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1270-block  0
call    0 never executed
    #####: 1271:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1271-block  0
unconditional  1 never executed
    $$$$$: 1271-block  1
branch  2 never executed
branch  3 never executed
        -: 1272:	{
    #####: 1273:	  if (i != currentPlayer)
    $$$$$: 1273-block  0
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1275-block  0
unconditional  0 never executed
    $$$$$: 1275-block  1
unconditional  1 never executed
    $$$$$: 1275-block  2
branch  2 never executed
branch  3 never executed
        -: 1276:		{
    #####: 1277:		  if (state->hand[i][j] == copper)
    $$$$$: 1277-block  0
branch  0 never executed
branch  1 never executed
        -: 1278:		    {
    #####: 1279:		      discardCard(j, i, state, 0);
    $$$$$: 1279-block  0
call    0 never executed
    #####: 1280:		      break;
unconditional  0 never executed
        -: 1281:		    }
    #####: 1282:		  if (j == state->handCount[i])
    $$$$$: 1282-block  0
branch  0 never executed
branch  1 never executed
        -: 1283:		    {
    #####: 1284:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1284-block  0
unconditional  0 never executed
    $$$$$: 1284-block  1
unconditional  1 never executed
    $$$$$: 1284-block  2
branch  2 never executed
branch  3 never executed
        -: 1285:			{
        -: 1286:			  if (DEBUG)
        -: 1287:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1288:			}	
    #####: 1289:		      break;
    $$$$$: 1289-block  0
unconditional  0 never executed
        -: 1290:		    }		
        -: 1291:		}
        -: 1292:					
        -: 1293:	    }
        -: 1294:				
        -: 1295:	}				
        -: 1296:
        -: 1297:      //discard played card from hand
    #####: 1298:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1298-block  0
call    0 never executed
        -: 1299:
    #####: 1300:      return 0;
unconditional  0 never executed
        -: 1301:
        -: 1302:		
        -: 1303:    case embargo:
        -: 1304:
    #####: 1305:	val = embargoFunction(state, choice1, handPos, currentPlayer);
    $$$$$: 1305-block  0
call    0 never executed
    #####: 1306:	return val;
unconditional  0 never executed
        -: 1307:	/* 
        -: 1308:      //+2 Coins
        -: 1309:      state->coins = state->coins + 2;
        -: 1310:			
        -: 1311:      //see if selected pile is in play
        -: 1312:      if ( state->supplyCount[choice1] == -1 )
        -: 1313:	{
        -: 1314:	  return -1;
        -: 1315:	}
        -: 1316:			
        -: 1317:      //add embargo token to selected supply pile
        -: 1318:      state->embargoTokens[choice1]++;
        -: 1319:			
        -: 1320:      //trash card
        -: 1321:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1322:      return 0; */
        -: 1323:		
        -: 1324:    case outpost:
        -: 1325:
        -: 1326:	/*val = outpostFunction(state, currentPlayer, handPos);
        -: 1327:	return val;
        -: 1328:	*/
        -: 1329:      //set outpost flag
    #####: 1330:      state->outpostPlayed++;
        -: 1331:			
        -: 1332:      //discard card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1333-block  0
call    0 never executed
    #####: 1334:      return 0; 
unconditional  0 never executed
        -: 1335:		
        -: 1336:    case salvager:
        -: 1337:      //+1 buy
    #####: 1338:      state->numBuys++;
        -: 1339:			
    #####: 1340:      if (choice1)
    $$$$$: 1340-block  0
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //gain coins equal to trashed card
    #####: 1343:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1343-block  0
call    0 never executed
call    1 never executed
        -: 1344:	  //trash card
    #####: 1345:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1346:	}
        -: 1347:			
        -: 1348:      //discard card
    #####: 1349:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1349-block  0
call    0 never executed
    #####: 1350:      return 0;
unconditional  0 never executed
        -: 1351:		
        -: 1352:    case sea_hag:
        -: 1353:
    #####: 1354:	val = seaHagFunction(state, currentPlayer, i);
    $$$$$: 1354-block  0
call    0 never executed
    #####: 1355:	return val;
unconditional  0 never executed
        -: 1356:	/*
        -: 1357:      for (i = 0; i < state->numPlayers; i++){
        -: 1358:	if (i != currentPlayer){
        -: 1359:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1360:	  state->discardCount[i]++;
        -: 1361:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1362:	}
        -: 1363:      }
        -: 1364:      return 0;*/
        -: 1365:		
        -: 1366:    case treasure_map:
        -: 1367:      //search hand for another treasure_map
    #####: 1368:      index = -1;
    #####: 1369:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1369-block  0
unconditional  0 never executed
    $$$$$: 1369-block  1
unconditional  1 never executed
    $$$$$: 1369-block  2
branch  2 never executed
branch  3 never executed
        -: 1370:	{
    #####: 1371:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1371-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1371-block  1
branch  2 never executed
branch  3 never executed
        -: 1372:	    {
    #####: 1373:	      index = i;
    #####: 1374:	      break;
    $$$$$: 1374-block  0
unconditional  0 never executed
        -: 1375:	    }
        -: 1376:	}
    #####: 1377:      if (index > -1)
    $$$$$: 1377-block  0
branch  0 never executed
branch  1 never executed
        -: 1378:	{
        -: 1379:	  //trash both treasure cards
    #####: 1380:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1380-block  0
call    0 never executed
    #####: 1381:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1382:
        -: 1383:	  //gain 4 Gold cards
    #####: 1384:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1384-block  0
branch  2 never executed
branch  3 never executed
        -: 1385:	    {
    #####: 1386:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1386-block  0
call    0 never executed
        -: 1387:	    }
        -: 1388:				
        -: 1389:	  //return success
    #####: 1390:	  return 1;
    $$$$$: 1390-block  0
unconditional  0 never executed
        -: 1391:	}
        -: 1392:			
        -: 1393:      //no second treasure_map found in hand
    #####: 1394:      return -1;
    $$$$$: 1394-block  0
unconditional  0 never executed
        -: 1395:    }
        -: 1396:	
    20000: 1397:  return -1;
    $$$$$: 1397-block  0
unconditional  0 never executed
    20000: 1397-block  1
unconditional  1 taken 20000
        -: 1398:}
        -: 1399:
function discardCard called 10000 returned 100% blocks executed 78%
    10000: 1400:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10000: 1400-block  0
        -: 1401:{
        -: 1402:	
        -: 1403:  //if card is not trashed, added to Played pile 
    10000: 1404:  if (trashFlag < 1)
    10000: 1404-block  0
branch  0 taken 10000 (fallthrough)
branch  1 taken 0
        -: 1405:    {
        -: 1406:      //add card to played pile
    10000: 1407:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10000: 1408:      state->playedCardCount++;
    10000: 1408-block  0
unconditional  0 taken 10000
        -: 1409:    }
        -: 1410:	
        -: 1411:  //set played card to -1
    10000: 1412:  state->hand[currentPlayer][handPos] = -1;
        -: 1413:	
        -: 1414:  //remove card from player's hand
    10000: 1415:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10000: 1415-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1416:    {
        -: 1417:      //reduce number of cards in hand
    #####: 1418:      state->handCount[currentPlayer]--;
    $$$$$: 1418-block  0
unconditional  0 never executed
        -: 1419:    }
    10000: 1420:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10000: 1420-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10000
        -: 1421:    {
        -: 1422:      //reduce number of cards in hand
    #####: 1423:      state->handCount[currentPlayer]--;
    $$$$$: 1423-block  0
unconditional  0 never executed
        -: 1424:    }
        -: 1425:  else 	
        -: 1426:    {
        -: 1427:      //replace discarded card with last card in hand
    10000: 1428:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1429:      //set last card to -1
    10000: 1430:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1431:      //reduce number of cards in hand
    10000: 1432:      state->handCount[currentPlayer]--;
    10000: 1432-block  0
unconditional  0 taken 10000
        -: 1433:    }
        -: 1434:	
    10000: 1435:  return 0;
    10000: 1435-block  0
unconditional  0 taken 10000
        -: 1436:}
        -: 1437:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1438:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1438-block  0
        -: 1439:{
        -: 1440:  //Note: supplyPos is enum of choosen card
        -: 1441:	
        -: 1442:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1443:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1443-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1444:    {
    #####: 1445:      return -1;
    $$$$$: 1445-block  0
unconditional  0 never executed
        -: 1446:    }
        -: 1447:	
        -: 1448:  //added card for [whoseTurn] current player:
        -: 1449:  // toFlag = 0 : add to discard
        -: 1450:  // toFlag = 1 : add to deck
        -: 1451:  // toFlag = 2 : add to hand
        -: 1452:
    #####: 1453:  if (toFlag == 1)
    $$$$$: 1453-block  0
branch  0 never executed
branch  1 never executed
        -: 1454:    {
    #####: 1455:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1456:      state->deckCount[player]++;
    $$$$$: 1456-block  0
unconditional  0 never executed
        -: 1457:    }
    #####: 1458:  else if (toFlag == 2)
    $$$$$: 1458-block  0
branch  0 never executed
branch  1 never executed
        -: 1459:    {
    #####: 1460:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1461:      state->handCount[player]++;
    $$$$$: 1461-block  0
unconditional  0 never executed
        -: 1462:    }
        -: 1463:  else
        -: 1464:    {
    #####: 1465:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1466:      state->discardCount[player]++;
    $$$$$: 1466-block  0
unconditional  0 never executed
        -: 1467:    }
        -: 1468:	
        -: 1469:  //decrease number in supply pile
    #####: 1470:  state->supplyCount[supplyPos]--;
        -: 1471:	 
    #####: 1472:  return 0;
    $$$$$: 1472-block  0
unconditional  0 never executed
        -: 1473:}
        -: 1474:
function updateCoins called 55082 returned 100% blocks executed 100%
    55082: 1475:int updateCoins(int player, struct gameState *state, int bonus)
    55082: 1475-block  0
        -: 1476:{
        -: 1477:  int i;
        -: 1478:	
        -: 1479:  //reset coin count
    55082: 1480:  state->coins = 0;
        -: 1481:
        -: 1482:  //add coins for each Treasure card in player's hand
   459717: 1483:  for (i = 0; i < state->handCount[player]; i++)
    55082: 1483-block  0
unconditional  0 taken 55082
   404635: 1483-block  1
unconditional  1 taken 404635
   459717: 1483-block  2
branch  2 taken 404635
branch  3 taken 55082 (fallthrough)
        -: 1484:    {
   404635: 1485:      if (state->hand[player][i] == copper)
   404635: 1485-block  0
branch  0 taken 66902 (fallthrough)
branch  1 taken 337733
        -: 1486:	{
    66902: 1487:	  state->coins += 1;
    66902: 1487-block  0
unconditional  0 taken 66902
        -: 1488:	}
   337733: 1489:      else if (state->hand[player][i] == silver)
   337733: 1489-block  0
branch  0 taken 13976 (fallthrough)
branch  1 taken 323757
        -: 1490:	{
    13976: 1491:	  state->coins += 2;
    13976: 1491-block  0
unconditional  0 taken 13976
        -: 1492:	}
   323757: 1493:      else if (state->hand[player][i] == gold)
   323757: 1493-block  0
branch  0 taken 14131 (fallthrough)
branch  1 taken 309626
        -: 1494:	{
    14131: 1495:	  state->coins += 3;
    14131: 1495-block  0
unconditional  0 taken 14131
        -: 1496:	}	
        -: 1497:    }	
        -: 1498:
        -: 1499:  //add bonus
    55082: 1500:  state->coins += bonus;
        -: 1501:
    55082: 1502:  return 0;
    55082: 1502-block  0
unconditional  0 taken 55082
        -: 1503:}
        -: 1504:
        -: 1505:
        -: 1506://end of dominion.c
        -: 1507:
